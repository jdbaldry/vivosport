// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package pgsql

import (
	"context"
	"database/sql"
	"time"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities (
    start_ts,
    end_ts,
    total_timer_time,
    num_sessions,
    type,
    event,
    event_type,
    local_ts,
    event_group
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT DO NOTHING
RETURNING id, start_ts, end_ts, total_timer_time, num_sessions, type, event, event_type, local_ts, event_group
`

type CreateActivityParams struct {
	StartTs        time.Time
	EndTs          time.Time
	TotalTimerTime sql.NullFloat64
	NumSessions    sql.NullInt32
	Type           sql.NullInt32
	Event          int16
	EventType      int16
	LocalTs        sql.NullTime
	EventGroup     int16
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.StartTs,
		arg.EndTs,
		arg.TotalTimerTime,
		arg.NumSessions,
		arg.Type,
		arg.Event,
		arg.EventType,
		arg.LocalTs,
		arg.EventGroup,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.StartTs,
		&i.EndTs,
		&i.TotalTimerTime,
		&i.NumSessions,
		&i.Type,
		&i.Event,
		&i.EventType,
		&i.LocalTs,
		&i.EventGroup,
	)
	return i, err
}

const createMonitoring = `-- name: CreateMonitoring :one
INSERT INTO monitorings (
  ts,
  calories,
  cycles,
  distance,
  active_time,
  activity_type,
  activity_sub_type,
  local_ts
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT DO NOTHING
RETURNING id, ts, cycles, calories, distance, active_time, activity_type, activity_sub_type, local_ts
`

type CreateMonitoringParams struct {
	Ts              time.Time
	Calories        int16
	Cycles          sql.NullInt32
	Distance        sql.NullFloat64
	ActiveTime      sql.NullFloat64
	ActivityType    int16
	ActivitySubType int16
	LocalTs         sql.NullTime
}

func (q *Queries) CreateMonitoring(ctx context.Context, arg CreateMonitoringParams) (Monitoring, error) {
	row := q.db.QueryRowContext(ctx, createMonitoring,
		arg.Ts,
		arg.Calories,
		arg.Cycles,
		arg.Distance,
		arg.ActiveTime,
		arg.ActivityType,
		arg.ActivitySubType,
		arg.LocalTs,
	)
	var i Monitoring
	err := row.Scan(
		&i.ID,
		&i.Ts,
		&i.Cycles,
		&i.Calories,
		&i.Distance,
		&i.ActiveTime,
		&i.ActivityType,
		&i.ActivitySubType,
		&i.LocalTs,
	)
	return i, err
}

const createRecord = `-- name: CreateRecord :one
INSERT INTO records (distance, time)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
RETURNING id, distance, time
`

type CreateRecordParams struct {
	Distance sql.NullInt32
	Time     sql.NullInt32
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) (Record, error) {
	row := q.db.QueryRowContext(ctx, createRecord, arg.Distance, arg.Time)
	var i Record
	err := row.Scan(&i.ID, &i.Distance, &i.Time)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    start_ts,
    end_ts,
    event,
    event_type,
    sport,
    sub_sport,
    total_elapsed_time,
    total_timer_time,
    total_distance,
    total_calories,
    avg_speed,
    max_speed,
    avg_heart_rate,
    max_heart_rate
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
ON CONFLICT DO NOTHING
RETURNING id, start_ts, end_ts, event, event_type, sport, sub_sport, total_elapsed_time, total_timer_time, total_distance, total_calories, avg_speed, max_speed, avg_heart_rate, max_heart_rate
`

type CreateSessionParams struct {
	StartTs          time.Time
	EndTs            time.Time
	Event            int16
	EventType        int16
	Sport            int16
	SubSport         int16
	TotalElapsedTime sql.NullFloat64
	TotalTimerTime   sql.NullFloat64
	TotalDistance    sql.NullFloat64
	TotalCalories    int16
	AvgSpeed         sql.NullFloat64
	MaxSpeed         sql.NullFloat64
	AvgHeartRate     int16
	MaxHeartRate     int16
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.StartTs,
		arg.EndTs,
		arg.Event,
		arg.EventType,
		arg.Sport,
		arg.SubSport,
		arg.TotalElapsedTime,
		arg.TotalTimerTime,
		arg.TotalDistance,
		arg.TotalCalories,
		arg.AvgSpeed,
		arg.MaxSpeed,
		arg.AvgHeartRate,
		arg.MaxHeartRate,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.StartTs,
		&i.EndTs,
		&i.Event,
		&i.EventType,
		&i.Sport,
		&i.SubSport,
		&i.TotalElapsedTime,
		&i.TotalTimerTime,
		&i.TotalDistance,
		&i.TotalCalories,
		&i.AvgSpeed,
		&i.MaxSpeed,
		&i.AvgHeartRate,
		&i.MaxHeartRate,
	)
	return i, err
}
